#include "Zebra.h"

static const uint16_t CRCtable[256] = 
{
  0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50A5, 0x60C6, 0x70E7, 0x8108, 0x9129, 0xA14A, 0xB16B, 0xC18C, 0xD1AD, 0xE1CE, 0xF1EF,
  0x1231, 0x0210, 0x3273, 0x2252, 0x52B5, 0x4294, 0x72F7, 0x62D6, 0x9339, 0x8318, 0xB37B, 0xA35A, 0xD3BD, 0xC39C, 0xF3FF, 0xE3DE,
  0x2462, 0x3443, 0x0420, 0x1401, 0x64E6, 0x74C7, 0x44A4, 0x5485, 0xA56A, 0xB54B, 0x8528, 0x9509, 0xE5EE, 0xF5CF, 0xC5AC, 0xD58D,
  0x3653, 0x2672, 0x1611, 0x0630, 0x76D7, 0x66F6, 0x5695, 0x46B4, 0xB75B, 0xA77A, 0x9719, 0x8738, 0xF7DF, 0xE7FE, 0xD79D, 0xC7BC,
  0x48C4, 0x58E5, 0x6886, 0x78A7, 0x0840, 0x1861, 0x2802, 0x3823, 0xC9CC, 0xD9ED, 0xE98E, 0xF9AF, 0x8948, 0x9969, 0xA90A, 0xB92B,
  0x5AF5, 0x4AD4, 0x7AB7, 0x6A96, 0x1A71, 0x0A50, 0x3A33, 0x2A12, 0xDBFD, 0xCBDC, 0xFBBF, 0xEB9E, 0x9B79, 0x8B58, 0xBB3B, 0xAB1A,
  0x6CA6, 0x7C87, 0x4CE4, 0x5CC5, 0x2C22, 0x3C03, 0x0C60, 0x1C41, 0xEDAE, 0xFD8F, 0xCDEC, 0xDDCD, 0xAD2A, 0xBD0B, 0x8D68, 0x9D49,
  0x7E97, 0x6EB6, 0x5ED5, 0x4EF4, 0x3E13, 0x2E32, 0x1E51, 0x0E70, 0xFF9F, 0xEFBE, 0xDFDD, 0xCFFC, 0xBF1B, 0xAF3A, 0x9F59, 0x8F78,
  0x9188, 0x81A9, 0xB1CA, 0xA1EB, 0xD10C, 0xC12D, 0xF14E, 0xE16F, 0x1080, 0x00A1, 0x30C2, 0x20E3, 0x5004, 0x4025, 0x7046, 0x6067,
  0x83B9, 0x9398, 0xA3FB, 0xB3DA, 0xC33D, 0xD31C, 0xE37F, 0xF35E, 0x02B1, 0x1290, 0x22F3, 0x32D2, 0x4235, 0x5214, 0x6277, 0x7256,
  0xB5EA, 0xA5CB, 0x95A8, 0x8589, 0xF56E, 0xE54F, 0xD52C, 0xC50D, 0x34E2, 0x24C3, 0x14A0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
  0xA7DB, 0xB7FA, 0x8799, 0x97B8, 0xE75F, 0xF77E, 0xC71D, 0xD73C, 0x26D3, 0x36F2, 0x0691, 0x16B0, 0x6657, 0x7676, 0x4615, 0x5634,
  0xD94C, 0xC96D, 0xF90E, 0xE92F, 0x99C8, 0x89E9, 0xB98A, 0xA9AB, 0x5844, 0x4865, 0x7806, 0x6827, 0x18C0, 0x08E1, 0x3882, 0x28A3,
  0xCB7D, 0xDB5C, 0xEB3F, 0xFB1E, 0x8BF9, 0x9BD8, 0xABBB, 0xBB9A, 0x4A75, 0x5A54, 0x6A37, 0x7A16, 0x0AF1, 0x1AD0, 0x2AB3, 0x3A92,
  0xFD2E, 0xED0F, 0xDD6C, 0xCD4D, 0xBDAA, 0xAD8B, 0x9DE8, 0x8DC9, 0x7C26, 0x6C07, 0x5C64, 0x4C45, 0x3CA2, 0x2C83, 0x1CE0, 0x0CC1,
  0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8, 0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
};

uint8_t gelenveri[1000] = {0};
uint8_t EPC_Value[16] = {0};
uint8_t Crc_check(uint8_t *ptr);
uint8_t EPC_Length;
uint8_t Crc_flag;
uint8_t Delay_time = 5;
uint8_t payload_length = 0;
uint8_t Length_of_following_data = 0;
uint8_t MAX_RF_Power = 20;
uint16_t Calculated_crc16 = 0;
uint16_t Received_crc16 = 0;
uint16_t SINGLE_TIME = 300;
uint16_t MULTI_TIME = 50;
uint16_t ResponseEPCTimeOutTime;
uint32_t Gelen_Veri_Index = 0;

unsigned long ResponseStartTime;


extern uint8_t responseEpcAmount, responseEPC_hex[5][16], responseEPC_length[5];
extern uint16_t responseCRC[5];

uint16_t CRC16_CalcteByte(uint8_t CheckByte, uint16_t LastCRC)
{
  return (LastCRC << 8) ^ CRCtable[(LastCRC >> 8) ^ CheckByte];
}

uint16_t CRC16_CalculateBuf(uint8_t *ptr, uint16_t len)
{
  uint16_t crc_result = 0xFFFF;

  while (len--)
  {
    crc_result = CRC16_CalcteByte(*ptr, crc_result);
    ptr++;
  }

  return crc_result ^= 0xffff;
}

uint8_t Crc_check(uint8_t *ptr)
{
  uint8_t Crc_ok;
  Length_of_following_data = ptr[5]; // The length of the following data, does not include checksum
  uint8_t crc_buffer[Length_of_following_data + 4];

  for (uint8_t i = 0; i < (sizeof(crc_buffer)); i++)
  {
    crc_buffer[i] = ptr[i + 2];
  }

  Calculated_crc16 = CRC16_CalculateBuf(crc_buffer, Length_of_following_data + 4);
  Received_crc16 = (ptr[6 + Length_of_following_data] << 8) + ptr[7 + Length_of_following_data]; // RECEÄ°VED CRC16: Length_of_following_datasi bilinen datanin crc hexleri alinir
  if (
      (Received_crc16 == Calculated_crc16) &&
      (Received_crc16 != 0))
  {
    Crc_ok = 1;
  }
  else
  {
    Crc_ok = 0;
  }
  return Crc_ok;
}

void Print_EPC(void)
{
#if DEBUG
  for (uint8_t j = 0; j < responseEpcAmount; j++)
  {
    Serial.printf("EPC[%d]: ", j);
    for (uint8_t i = 0; i < responseEPC_length[j]; i++)
    {
      if(responseEPC_hex[j][i]<=0x0F)
      Serial.print("0");
      Serial.print(responseEPC_hex[j][i], HEX);
    }
    Serial.println();
  }
#endif
}

void Zebra_Reset_Module(void)
{
  Stop_Command();
  delay(15);

  byte msg_1[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x51}; // disable all response packets
  RE40.write(msg_1, sizeof(msg_1));
  delay(15);

  Disable_Selects();
  delay(15);
  
  byte msg_3[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x04, 0x02, 0x00, 0x00, 0x00, 0x0C, 0x14}; // disable all queries
  RE40.write(msg_3, sizeof(msg_3));
  delay(15);

  byte msg_4[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF9, 0xA1}; // disable all access ops
  RE40.write(msg_4, sizeof(msg_4));
  delay(15);

  byte msg_5[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x1B, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0xA3}; // disable all antennas
  RE40.write(msg_5, sizeof(msg_5));
  delay(15);

  byte msg_7[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x07, 0xD0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAE, 0xAD}; // disable gpio start
  RE40.write(msg_7, sizeof(msg_7));
  delay(15);

  byte msg_8[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x0F, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x4B}; // set radio stop condition to one antenna
  RE40.write(msg_8, sizeof(msg_8));
  delay(25);
}

void Disable_Selects(void)
{
  byte msg_2[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x0B, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x66}; // disable selects
  RE40.write(msg_2, sizeof(msg_2));
  delay(5);
}

void Stop_Command(void)
{
  uint8_t data[] = {0xAA, 0xAB, 0x08, 0x08, 0x00, 0x00, 0x57, 0x5D};
  RE40.write(data, sizeof(data));
}

void Radio_Stop_Conditions_Command(void)
{
  uint8_t data[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x0F, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD3, 0x4F};
  //uint8_t data[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x0F, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x4B};
  RE40.write(data, sizeof(data));
}

void Zebra_ETSI_Region(void)
{
  // uint8_t data[]= {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x09, 0x08, 0x01, 0x01, 0x00, 0x0D, 0x3E, 0xA0, 0x00, 0x1E, 0xCD, 0x35}; // 868 MHz
  // RE40.write(data, sizeof(data));
  // delay(5);
  byte msg_1[] = {0xAA, 0xAB, 0x08, 0x08, 0x00, 0x00, 0x57, 0x5D};
  delay(Delay_time);
  RE40.write(msg_1, sizeof(msg_1));

  byte msg_2[] = {0xAA, 0xAB, 0x08, 0x08, 0x00, 0x00, 0x57, 0x5D};
  delay(Delay_time);
  RE40.write(msg_2, sizeof(msg_2));

  byte msg_3[] = {0xAA, 0xAB, 0x08, 0x02, 0x00, 0x02, 0x00, 0x01, 0xC6, 0x6F};
  delay(Delay_time);
  RE40.write(msg_3, sizeof(msg_3));

  byte msg_4[] = {0xAA, 0xAB, 0x08, 0x02, 0x00, 0x02, 0x22, 0x05, 0xE6, 0x6F};
  delay(Delay_time);
  RE40.write(msg_4, sizeof(msg_4));

  byte msg_5[] = {0xAA, 0xAB, 0x08, 0x02, 0x00, 0x02, 0x00, 0x01, 0xC6, 0x6F};
  delay(Delay_time);
  RE40.write(msg_5, sizeof(msg_5));

  byte msg_6[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x51};
  delay(Delay_time);
  RE40.write(msg_6, sizeof(msg_6));

  byte msg_7[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x06, 0x00, 0x09, 0x00, 0x00, 0xA6, 0x71, 0x6F, 0x99};
  delay(Delay_time);
  RE40.write(msg_7, sizeof(msg_7));

  byte msg_8[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x06, 0x00, 0x20, 0x00, 0x01, 0x00, 0x22, 0x25, 0x2F};
  delay(Delay_time);
  RE40.write(msg_8, sizeof(msg_8));

  byte msg_9[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x06, 0x00, 0x38, 0x00, 0x00, 0x31, 0x04, 0x66, 0x68};
  delay(Delay_time);
  RE40.write(msg_9, sizeof(msg_9));

  byte msg_10[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x06, 0x00, 0x34, 0x00, 0x02, 0x00, 0x00, 0xF5, 0x03};
  delay(Delay_time);
  RE40.write(msg_10, sizeof(msg_10));

  byte msg_11[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x06, 0x00, 0x3C, 0x00, 0x00, 0xE0, 0xFC, 0xA7, 0x6F};
  delay(Delay_time);
  RE40.write(msg_11, sizeof(msg_11));

  byte msg_12[] = {0xAA, 0xAB, 0x08, 0x04, 0x00, 0x02, 0x04, 0x0C, 0x16, 0x83};
  delay(Delay_time);
  RE40.write(msg_12, sizeof(msg_12));

  byte msg_13[] = {0xAA, 0xAB, 0x08, 0x03, 0x00, 0x04, 0x04, 0x00, 0x00, 0x02, 0x6B, 0x2C}; //
  delay(Delay_time);
  RE40.write(msg_13, sizeof(msg_13));

  byte msg_14[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x03, 0x08, 0x85, 0x00, 0x0E, 0x2C};
  delay(Delay_time);
  RE40.write(msg_14, sizeof(msg_14));

  byte msg_15[] = {0xAA, 0xAB, 0x08, 0x02, 0x00, 0x02, 0x08, 0x01, 0x4F, 0xC6};
  delay(Delay_time);
  RE40.write(msg_15, sizeof(msg_15));

  byte msg_16[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x09, 0x08, 0x01, 0x00, 0x00, 0x0D, 0x35, 0xA4, 0x01, 0x0E, 0x96, 0x8B}; //
  delay(Delay_time);
  RE40.write(msg_16, sizeof(msg_16));

  byte msg_17[] = {0xAA, 0xAB, 0x08, 0x02, 0x00, 0x02, 0x08, 0x02, 0x7F, 0xA5};
  delay(Delay_time);
  RE40.write(msg_17, sizeof(msg_17));

  byte msg_18[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x09, 0x08, 0x02, 0x00, 0x00, 0x0D, 0x37, 0xFC, 0x01, 0x0E, 0x44, 0xF9}; //
  delay(Delay_time);
  RE40.write(msg_18, sizeof(msg_18));

  byte msg_19[] = {0xAA, 0xAB, 0x08, 0x02, 0x00, 0x02, 0x08, 0x03, 0x6F, 0x84};
  delay(Delay_time);
  RE40.write(msg_19, sizeof(msg_19));

  byte msg_20[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x09, 0x08, 0x03, 0x00, 0x00, 0x0D, 0x3A, 0x54, 0x01, 0x0E, 0x2E, 0x91}; //
  delay(Delay_time);
  RE40.write(msg_20, sizeof(msg_20));

  byte msg_21[] = {0xAA, 0xAB, 0x08, 0x02, 0x00, 0x02, 0x08, 0x04, 0x1F, 0x63};
  delay(Delay_time);
  RE40.write(msg_21, sizeof(msg_21));

  byte msg_22[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x09, 0x08, 0x04, 0x00, 0x00, 0x0D, 0x3C, 0xAC, 0x01, 0x0E, 0x84, 0xE3};
  delay(Delay_time);
  RE40.write(msg_22, sizeof(msg_22));

  byte msg_23[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x09, 0x08, 0x01, 0x01, 0x00, 0x0D, 0x35, 0xA4, 0x01, 0x0E, 0x2E, 0xEA};
  delay(Delay_time);
  RE40.write(msg_23, sizeof(msg_23));

  byte msg_24[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x09, 0x08, 0x02, 0x01, 0x00, 0x0D, 0x37, 0xFC, 0x01, 0x0E, 0xFC, 0x98};
  delay(Delay_time);
  RE40.write(msg_24, sizeof(msg_24));

  byte msg_25[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x09, 0x08, 0x03, 0x01, 0x00, 0x0D, 0x3A, 0x54, 0x01, 0x0E, 0x96, 0xF0};
  delay(Delay_time);
  RE40.write(msg_25, sizeof(msg_25));

  byte msg_26[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x09, 0x08, 0x04, 0x01, 0x00, 0x0D, 0x3C, 0xAC, 0x01, 0x0E, 0x3C, 0x82};
  delay(Delay_time);
  RE40.write(msg_26, sizeof(msg_26));

  byte msg_27[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x07, 0x08, 0x84, 0x00, 0xFF, 0xB6, 0x03, 0x05, 0x62, 0x05};
  delay(Delay_time);
  RE40.write(msg_27, sizeof(msg_27));

  byte msg_28[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x06, 0x08, 0x83, 0x03, 0xE8, 0x00, 0x02, 0x6D, 0xC5}; // FARKLI
  delay(Delay_time);
  RE40.write(msg_28, sizeof(msg_28));

  byte msg_29[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x0D, 0x03, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0xF9};
  delay(Delay_time);
  RE40.write(msg_29, sizeof(msg_29));

  byte msg_30[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x1B, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0xA3};
  delay(Delay_time);
  RE40.write(msg_30, sizeof(msg_30));

  byte msg_31[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x0B, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x66};
  delay(Delay_time);
  RE40.write(msg_31, sizeof(msg_31));

  byte msg_32[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x04, 0x02, 0x00, 0x00, 0x00, 0x0C, 0x14};
  delay(Delay_time);
  RE40.write(msg_32, sizeof(msg_32));

  byte msg_33[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF9, 0xA1};
  delay(Delay_time);
  RE40.write(msg_33, sizeof(msg_33));

  byte msg_34[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x0D, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x8C};
  delay(Delay_time);
  RE40.write(msg_34, sizeof(msg_34));

  byte msg_35[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x0F, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD3, 0x4F};
  delay(Delay_time);
  RE40.write(msg_35, sizeof(msg_35));

  byte msg_36[] = {0xAA, 0xAB, 0x08, 0x02, 0x00, 0x02, 0x00, 0x13, 0xF4, 0x1C};
  delay(Delay_time);
  RE40.write(msg_36, sizeof(msg_36));

  byte msg_37[] = {0xAA, 0xAB, 0x08, 0x02, 0x00, 0x02, 0x00, 0x0F, 0x27, 0xA1};
  delay(Delay_time);
  RE40.write(msg_37, sizeof(msg_37));

  byte msg_38[] = {0xAA, 0xAB, 0x08, 0x02, 0x00, 0x02, 0x00, 0x0E, 0x37, 0x80};
  delay(Delay_time);
  RE40.write(msg_38, sizeof(msg_38));

  byte msg_39[] = {0xAA, 0xAB, 0x08, 0x02, 0x00, 0x02, 0x00, 0x11, 0xD4, 0x5E};
  delay(Delay_time);
  RE40.write(msg_39, sizeof(msg_39));

  byte msg_40[] = {0xAA, 0xAB, 0x08, 0x02, 0x00, 0x02, 0x00, 0x11, 0xD4, 0x5E};
  delay(Delay_time);
  RE40.write(msg_40, sizeof(msg_40));

  byte msg_41[] = {0xAA, 0xAB, 0x08, 0x04, 0x00, 0x02, 0x04, 0x0C, 0x16, 0x83};
  delay(Delay_time);
  RE40.write(msg_41, sizeof(msg_41));

  byte msg_42[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x03, 0xD0, 0x01, 0x40, 0x5D, 0x81};
  delay(Delay_time);
  RE40.write(msg_42, sizeof(msg_42));

  byte msg_43[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x03, 0xD0, 0x02, 0x40, 0x08, 0xD2};
  delay(Delay_time);
  RE40.write(msg_43, sizeof(msg_43));

  byte msg_44[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x03, 0xD0, 0x01, 0x80, 0x84, 0xCD};
  delay(Delay_time);
  RE40.write(msg_44, sizeof(msg_44));

  byte msg_45[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x03, 0xD0, 0x02, 0x80, 0xD1, 0x9E};
  delay(Delay_time);
  RE40.write(msg_45, sizeof(msg_45));

  byte msg_46[] = {0xAA, 0xAB, 0x08, 0x02, 0x00, 0x02, 0xD0, 0x02, 0xE3, 0x2B};
  delay(Delay_time);
  RE40.write(msg_46, sizeof(msg_46));

  byte msg_47[] = {0xAA, 0xAB, 0x08, 0x02, 0x00, 0x02, 0xD0, 0x02, 0xE3, 0x2B};
  delay(Delay_time);
  RE40.write(msg_47, sizeof(msg_47));
}

void Antenna_Parameter(uint8_t Power) // anten ayar CRC-16/GENIBUS
{
  uint8_t MSB = ((Power*10) >> 8) & 0xFF;  // MSB
  uint8_t LSB = (Power*10) & 0xFF;          // LSB

  uint8_t RawData[] = {0x08, 0x01, 0x00, 0x1B, 0x04, 0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x01, MSB, LSB, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCA};
  uint16_t CRC_EPC = CRC16_CalculateBuf(RawData, sizeof(RawData));
  
  uint8_t crcHigh = (CRC_EPC >> 8) & 0xFF; // MSB
  uint8_t crcLow = CRC_EPC & 0xFF;         // LSB

  uint8_t SendData[sizeof(RawData) + 2 + 2]; // 2 bayt baÅlÄ±k, 2 bayt CRC
  
  SendData[0] = 0xAA;
  SendData[1] = 0xAB;
  
  memcpy(&SendData[2], RawData, sizeof(RawData));
  
  SendData[sizeof(RawData) + 2] = crcHigh;
  SendData[sizeof(RawData) + 3] = crcLow;

#if 0
  Serial.print("SendData: ");
  for(uint8_t i = 0; i<sizeof(SendData); i++)
  {
    if(SendData[i]<=0x0F)
    Serial.print("0");
    Serial.print(SendData[i],HEX);
    Serial.print(" ");
  }
  Serial.println();
#endif

  RE40.write(SendData, sizeof(SendData));
  delay(10);

}

void Start_Command(void)
{
  uint8_t data[] = {0xAA, 0xAB, 0x08, 0x09, 0x00, 0x00, 0x60, 0x6D};
  RE40.write(data, sizeof(data));
}

void Query_Parameter(void)
{
  // uint8_t data[] = { 0xAA, 0xAB, 0x08, 0x01, 0x00, 0x08, 0x02, 0x01, 0x01, 0x01, 0x00, 0x01, 0x00, 0x08, 0xFF, 0x16};
  uint8_t data[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x08, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x02, 0x06, 0x4F, 0x8A};
  RE40.write(data, sizeof(data));
  delay(5);
}

void Access_Parameter_Read(void)
{
  uint8_t data[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x0C, 0x03, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3A, 0x18};
  RE40.write(data, sizeof(data));
}

void Access_Info(void)
{
  uint8_t data2[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x00, 0x05, 0x67, 0xC4}; // Enable tag packet
  RE40.write(data2, sizeof(data2));
  delay(5);

  uint8_t data3[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x06, 0x00, 0x09, 0x00, 0x00, 0xBF, 0x71, 0xD6, 0x72}; // Set tag packet contents
  RE40.write(data3, sizeof(data3));
  delay(5);

  uint8_t data1[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x0C, 0xA3, 0xBE}; // enable access info
  RE40.write(data1, sizeof(data1));
  delay(5);

  uint8_t data4[] = {0xAA, 0xAB, 0x08, 0x01, 0x00, 0x08, 0x02, 0x01, 0x01, 0x01, 0x00, 0x01, 0x00, 0x08, 0xFF, 0x16}; // query kill
  RE40.write(data4, sizeof(data4));
}

void Zebra_Start_Reading_EPC(uint8_t Reader_Power)
{
  Stop_Command();
  delay(5);

  Zebra_ETSI_Region();
  delay(5);

  Radio_Stop_Conditions_Command();
  delay(5);

  Access_Info();
  delay(5);

  Query_Parameter();
  delay(5);

  Access_Parameter_Read();
  delay(5);

  Antenna_Parameter(Reader_Power);
  delay(5);

  Start_Command();
  delay(5);

  while(RE40.available()){RE40.read();} 
}


